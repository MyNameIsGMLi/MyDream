//StateDesign（状态模式）
//状态模式其实质是为了方便各种状态之间的转换，方式并不是唯一的，实现了各个状态之间的装换，状态之间尽可能的降低耦合性即可
// 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。
//以下为实例脚本（不唯一）

  public class StatePattern : MonoBehaviour {

    void Start () {
        StateOne stateOne = new StateOne();
        StateTwo stateTwo = new StateTwo();
        StateThree stateThree = new StateThree();
        SelectState selectState = new SelectState(stateOne);
        selectState.State();
    }
	
}

/// <summary>
/// 选择状态类
/// </summary>
public class SelectState
{
    private StateMould mstateMould;
    public SelectState(StateMould stateMould)
    {
        mstateMould = stateMould;
    }

 
    public void State()
    {
        mstateMould.State();
    }
}
/// <summary>
/// 状态模板类
/// </summary>
public class StateMould
{
    /// <summary>
    /// 状态实现函数
    /// </summary>
    public virtual void State() { }
}
/// <summary>
/// 第一个状态
/// </summary>
public class StateOne:StateMould
{
   
    public override void State()
    {
       
            Debug.Log("第一个状态");
        
    }
}
/// <summary>
/// 第二个状态
/// </summary>
public class StateTwo : StateMould
{
    public override void State()
    {
        Debug.Log("第二个状态");
    }
}
/// <summary>
/// 第三个状态
/// </summary>
public class StateThree : StateMould
{
    public override void State()
    {
        Debug.Log("第三个状态");
    }
}
